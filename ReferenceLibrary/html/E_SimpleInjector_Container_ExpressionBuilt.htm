<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><style type="text/css">.OH_CodeSnippetContainerTabLeftActive, .OH_CodeSnippetContainerTabLeft,.OH_CodeSnippetContainerTabLeftDisabled { }.OH_CodeSnippetContainerTabRightActive, .OH_CodeSnippetContainerTabRight,.OH_CodeSnippetContainerTabRightDisabled { }.OH_footer { }</style><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>Container.ExpressionBuilt Event</title><meta name="Language" content="en-us" /><meta name="System.Keywords" content="ExpressionBuilt event" /><meta name="System.Keywords" content="Container.ExpressionBuilt event" /><meta name="Microsoft.Help.F1" content="SimpleInjector.Container.ExpressionBuilt" /><meta name="Microsoft.Help.Id" content="E:SimpleInjector.Container.ExpressionBuilt" /><meta name="Description" content="Occurs after the creation of the of a registered type is complete (the lifestyle has been applied), allowing the created to be wrapped, changed, or replaced. Multiple delegates may handle the same service type." /><meta name="Microsoft.Help.ContentType" content="Reference" /><meta name="BrandingAware" content="true" /><meta name="container" content="SimpleInjector" /><meta name="file" content="E_SimpleInjector_Container_ExpressionBuilt" /><meta name="guid" content="E_SimpleInjector_Container_ExpressionBuilt" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><script type="text/javascript" src="../scripts/clipboard.min.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="OH_outerDiv"><div class="OH_outerContent"><table class="TitleTable"><tr><td class="OH_tdTitleColumn"><h1>Container<span id="LSTDAF4AA19_0"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTDAF4AA19_0?cpp=::|nu=.");</script>ExpressionBuilt Event</h1></td><td class="OH_tdRunningTitleColumn">Simple Injector</td></tr></table><div id="mainSection"><div id="mainBody"><span class="introStyle"></span> <div class="summary">
             Occurs after the creation of the <a href="https://docs.microsoft.com/dotnet/api/system.linq.expressions.expression" target="_blank">Expression</a> of a registered type is complete (the
             lifestyle has been applied), allowing the created <a href="https://docs.microsoft.com/dotnet/api/system.linq.expressions.expression" target="_blank">Expression</a> to be wrapped,
             changed, or replaced. Multiple delegates may handle the same service type.
             </div><p> </p>
    <strong>Namespace:</strong> 
   <a href="N_SimpleInjector.htm">SimpleInjector</a><br />
    <strong>Assembly:</strong>
   SimpleInjector (in SimpleInjector.dll) Version: 4.9.1<div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Syntax</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"> </div><div class="OH_CodeSnippetContainer"><div class="OH_CodeSnippetContainerTabs"><div class="OH_CodeSnippetContainerTabLeft" id="ID0ECCA_tabimgleft"> </div><div id="ID0ECCA_tab1" class="OH_CodeSnippetContainerTabFirst"><a href="#" onclick="javascript:ChangeTab('ID0ECCA','cs','1','3');return false;">C#</a></div><div id="ID0ECCA_tab2" class="OH_CodeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0ECCA','vb','2','3');return false;">VB</a></div><div id="ID0ECCA_tab3" class="OH_CodeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0ECCA','asp','3','3');return false;">ASP.NET</a></div><div class="OH_CodeSnippetContainerTabRight" id="ID0ECCA_tabimgright"> </div></div><div class="OH_CodeSnippetContainerCodeCollection"><div class="OH_CodeSnippetToolBar"><div class="OH_CodeSnippetToolBarText"><a id="ID0ECCA_copyCode" href="#" class="OH_copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0ECCA');return false;" title="Copy">Copy</a></div></div><div id="ID0ECCA_code_Div1" class="OH_CodeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="keyword">public</span> event <span class="identifier">EventHandler</span>&lt;<span class="identifier">ExpressionBuiltEventArgs</span>&gt; <span class="identifier">ExpressionBuilt</span></pre></div><div id="ID0ECCA_code_Div2" class="OH_CodeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">Public</span> Event <span class="identifier">ExpressionBuilt</span> <span class="keyword">As</span> <span class="identifier">EventHandler</span>(<span class="keyword">Of</span> <span class="identifier">ExpressionBuiltEventArgs</span>)</pre></div><div id="ID0ECCA_code_Div3" class="OH_CodeSnippetContainerCode" style="display: none"><pre xml:space="preserve" /></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0ECCA");</script><h4 class="subHeading">Value</h4>Type: <a href="https://docs.microsoft.com/dotnet/api/system.eventhandler-1" target="_blank">System<span id="LSTDAF4AA19_1"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTDAF4AA19_1?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>EventHandler</a><span id="LSTDAF4AA19_2"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTDAF4AA19_2?cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=(");</script><a href="T_SimpleInjector_ExpressionBuiltEventArgs.htm">ExpressionBuiltEventArgs</a><span id="LSTDAF4AA19_3"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTDAF4AA19_3?cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)");</script><div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Remarks</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"> </div><p>
             The <b>ExpressionBuilt</b> event is called by the container every time an registered type is
             getting compiled, allowing a developer to change the way the type is created. The delegate that
             hooks to the <b>ExpressionBuilt</b> event, can change the
             <a href="P_SimpleInjector_ExpressionBuiltEventArgs_Expression.htm">Expression</a> property on the
             <a href="T_SimpleInjector_ExpressionBuiltEventArgs.htm">ExpressionBuiltEventArgs</a>, which allows changing the way the type is constructed.
             </p><p><b>Thread-safety:</b> Please note that the container will not ensure that the hooked delegates
             are executed only once per service type. While the calls to <span class="selflink">ExpressionBuilt</span> for a
             given type are finite (and will in most cases happen just once), a container can call the delegate
             multiple times and make parallel calls to the delegate. You must make sure that the code can be
             called multiple times and is thread-safe.
             </p><div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Examples</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"> </div>
             The following example shows the usage of the <b>ExpressionBuilt</b> event:
             <div class="OH_CodeSnippetContainer"><div class="OH_CodeSnippetContainerTabs"><div class="OH_CodeSnippetContainerTabLeftActive" id="ID0EACABA_tabimgleft"> </div><div id="ID0EACABA_tab1" class="OH_CodeSnippetContainerTabSolo">C#</div><div class="OH_CodeSnippetContainerTabRightActive" id="ID0EACABA_tabimgright"> </div></div><div class="OH_CodeSnippetContainerCodeCollection"><div class="OH_CodeSnippetToolBar"><div class="OH_CodeSnippetToolBarText"><a id="ID0EACABA_copyCode" href="#" class="OH_copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EACABA');return false;" title="Copy">Copy</a></div></div><div id="ID0EACABA_code_Div1" class="OH_CodeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">public</span> <span class="highlight-keyword">interface</span> IValidator&lt;T&gt;
{
    <span class="highlight-keyword">void</span> Validate(T instance);
}

<span class="highlight-keyword">public</span> <span class="highlight-keyword">interface</span> ILogger
{
    <span class="highlight-keyword">void</span> Write(<span class="highlight-keyword">string</span> message);
}

<span class="highlight-comment">// Implementation of the decorator pattern.</span>
<span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> MonitoringValidator&lt;T&gt; : IValidator&lt;T&gt;
{
    <span class="highlight-keyword">private</span> <span class="highlight-keyword">readonly</span> IValidator&lt;T&gt; validator;
    <span class="highlight-keyword">private</span> <span class="highlight-keyword">readonly</span> ILogger logger;

    <span class="highlight-keyword">public</span> MonitoringValidator(IValidator&lt;T&gt; validator, ILogger logger)
    {
        <span class="highlight-keyword">this</span>.validator = validator;
        <span class="highlight-keyword">this</span>.logger = logger;
    }

    <span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> Validate(T instance)
    {
        <span class="highlight-keyword">this</span>.logger.Write(<span class="highlight-literal">"Validating "</span> + <span class="highlight-keyword">typeof</span>(T).Name);
        <span class="highlight-keyword">this</span>.validator.Validate(instance);
        <span class="highlight-keyword">this</span>.logger.Write(<span class="highlight-literal">"Validated "</span> + <span class="highlight-keyword">typeof</span>(T).Name);
    }
}

[TestMethod]
<span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> TestExpressionBuilt()
{
    <span class="highlight-comment">// Arrange</span>
    <span class="highlight-keyword">var</span> container = <span class="highlight-keyword">new</span> Container();

    container.Register&lt;ILogger, ConsoleLogger&gt;(Lifestyle.Singleton);
    container.Register&lt;IValidator&lt;Order&gt;, OrderValidator&gt;();
    container.Register&lt;IValidator&lt;Customer&gt;, CustomerValidator&gt;();

    <span class="highlight-comment">// Intercept the creation of IValidator&lt;T&gt; instances and wrap them in a MonitoringValidator&lt;T&gt;:</span>
    container.ExpressionBuilt += (sender, e) =&gt;
    {
        <span class="highlight-keyword">if</span> (e.RegisteredServiceType.IsGenericType &amp;&amp;
            e.RegisteredServiceType.GetGenericTypeDefinition() == <span class="highlight-keyword">typeof</span>(IValidator&lt;&gt;))
        {
            <span class="highlight-keyword">var</span> decoratorType = <span class="highlight-keyword">typeof</span>(MonitoringValidator&lt;&gt;)
                .MakeGenericType(e.RegisteredServiceType.GetGenericArguments());

            <span class="highlight-comment">// Wrap the IValidator&lt;T&gt; in a MonitoringValidator&lt;T&gt;.</span>
            e.Expression = Expression.New(decoratorType.GetConstructors()[<span class="highlight-number">0</span>], <span class="highlight-keyword">new</span> Expression[]
            {
                e.Expression,
                container.GetRegistration(<span class="highlight-keyword">typeof</span>(ILogger)).BuildExpression(),
            });
        }
    };

    <span class="highlight-comment">// Act</span>
    <span class="highlight-keyword">var</span> orderValidator = container.GetInstance&lt;IValidator&lt;Order&gt;&gt;();
    <span class="highlight-keyword">var</span> customerValidator = container.GetInstance&lt;IValidator&lt;Customer&gt;&gt;();

    <span class="highlight-comment">// Assert</span>
    Assert.IsInstanceOfType(orderValidator, <span class="highlight-keyword">typeof</span>(MonitoringValidator&lt;Order&gt;));
    Assert.IsInstanceOfType(customerValidator, <span class="highlight-keyword">typeof</span>(MonitoringValidator&lt;Customer&gt;));
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EACABA");</script><p>
             The example above registers a delegate that is raised every time the container compiles the
             expression for an registered type. The delegate checks whether the requested type is a closed generic
             implementation of the <b>IValidator&lt;T&gt;</b> interface (such as
             <b>IValidator&lt;Order&gt;</b> or <b>IValidator&lt;Customer&gt;</b>). In that case it
             will changes the current <a href="P_SimpleInjector_ExpressionBuiltEventArgs_Expression.htm">Expression</a> with a new one that creates
             a new <b>MonitoringValidator&lt;T&gt;</b> that takes the current validator (and an <b>ILogger</b>)
             as an dependency.
             </p><p>
             Please note that given example is just an uhhmm... example. In the case of the example the
             <b>MonitoringValidator&lt;T&gt;</b> is a decorator and instead of manually writing this code that
             many limitations, you can use one of the built-in
             <a href="M_SimpleInjector_Container_RegisterDecorator_2.htm">RegisterDecorator</a> methods instead.
             These extension methods take care of any given generic type constraint, allow to register decorators
             conditionally and allow the decorator to be integrated into the container's pipeline, which allows
             it to be intercepted using the <a href="E_SimpleInjector_Container_ExpressionBuilding.htm">ExpressionBuilding</a> event and allow any registered
             <a href="M_SimpleInjector_Container_RegisterInitializer__1.htm">initializers</a> to be applied.
             </p><div class="OH_CollapsibleAreaRegion" id="seeAlsoSection"><div class="OH_regiontitle">See Also</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"> </div><h4 class="subHeading">Reference</h4><div class="seeAlsoStyle"><a href="T_SimpleInjector_Container.htm">Container Class</a></div><div class="seeAlsoStyle"><a href="N_SimpleInjector.htm">SimpleInjector Namespace</a></div></div></div></div></div><div id="OH_footer" class="OH_footer"><p>Copyright (c) Simple Injector Contributors</p> </div></body></html>