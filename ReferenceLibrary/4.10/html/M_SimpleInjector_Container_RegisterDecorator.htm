<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><style type="text/css">.OH_CodeSnippetContainerTabLeftActive, .OH_CodeSnippetContainerTabLeft,.OH_CodeSnippetContainerTabLeftDisabled { }.OH_CodeSnippetContainerTabRightActive, .OH_CodeSnippetContainerTabRight,.OH_CodeSnippetContainerTabRightDisabled { }.OH_footer { }</style><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>Container.RegisterDecorator Method (Type, Func(DecoratorPredicateContext, Type), Lifestyle, Predicate(DecoratorPredicateContext))</title><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Id" content="M:SimpleInjector.Container.RegisterDecorator(System.Type,System.Func{SimpleInjector.DecoratorPredicateContext,System.Type},SimpleInjector.Lifestyle,System.Predicate{SimpleInjector.DecoratorPredicateContext})" /><meta name="Description" content="Ensures that the decorator type that is returned from is supplied when the supplied returns true and cached with the given , wrapping the original registered , by injecting that service type into the constructor of the decorator type that is returned by th" /><meta name="Microsoft.Help.ContentType" content="Reference" /><meta name="BrandingAware" content="true" /><meta name="container" content="SimpleInjector" /><meta name="file" content="M_SimpleInjector_Container_RegisterDecorator" /><meta name="guid" content="M_SimpleInjector_Container_RegisterDecorator" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><script type="text/javascript" src="../scripts/clipboard.min.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="OH_outerDiv"><div class="OH_outerContent"><table class="TitleTable"><tr><td class="OH_tdTitleColumn"><h1>Container<span id="LST88C8D0A5_0"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88C8D0A5_0?cpp=::|nu=.");</script>RegisterDecorator Method (Type, Func<span id="LST88C8D0A5_1"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88C8D0A5_1?cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=(");</script>DecoratorPredicateContext, Type<span id="LST88C8D0A5_2"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88C8D0A5_2?cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)");</script>, Lifestyle, Predicate<span id="LST88C8D0A5_3"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88C8D0A5_3?cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=(");</script>DecoratorPredicateContext<span id="LST88C8D0A5_4"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88C8D0A5_4?cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)");</script>)</h1></td><td class="OH_tdRunningTitleColumn">Simple Injector</td></tr></table><div id="mainSection"><div id="mainBody"><span class="introStyle"></span> <div class="summary">
             Ensures that the decorator type that is returned from <span class="parameter">decoratorTypeFactory</span> is
             supplied when the supplied <span class="parameter">predicate</span> returns <b>true</b> and cached with the given
             <span class="parameter">lifestyle</span>, wrapping the original registered <span class="parameter">serviceType</span>, by
             injecting that service type into the constructor of the decorator type that is returned by the
             supplied <span class="parameter">decoratorTypeFactory</span>.
             Multiple decorators may be applied to the same <span class="parameter">serviceType</span>. Decorators can be
             applied to both open, closed, and non-generic service types.
             </div><p> </p>
    <strong>Namespace:</strong> 
   <a href="N_SimpleInjector.htm">SimpleInjector</a><br />
    <strong>Assembly:</strong>
   SimpleInjector (in SimpleInjector.dll) Version: 4.10.2<div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Syntax</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"> </div><div class="OH_CodeSnippetContainer"><div class="OH_CodeSnippetContainerTabs"><div class="OH_CodeSnippetContainerTabLeft" id="ID0ECCA_tabimgleft"> </div><div id="ID0ECCA_tab1" class="OH_CodeSnippetContainerTabFirst"><a href="#" onclick="javascript:ChangeTab('ID0ECCA','cs','1','3');return false;">C#</a></div><div id="ID0ECCA_tab2" class="OH_CodeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0ECCA','vb','2','3');return false;">VB</a></div><div id="ID0ECCA_tab3" class="OH_CodeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0ECCA','asp','3','3');return false;">ASP.NET</a></div><div class="OH_CodeSnippetContainerTabRight" id="ID0ECCA_tabimgright"> </div></div><div class="OH_CodeSnippetContainerCodeCollection"><div class="OH_CodeSnippetToolBar"><div class="OH_CodeSnippetToolBarText"><a id="ID0ECCA_copyCode" href="#" class="OH_copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0ECCA');return false;" title="Copy">Copy</a></div></div><div id="ID0ECCA_code_Div1" class="OH_CodeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">void</span> <span class="identifier">RegisterDecorator</span>(
	<span class="identifier">Type</span> <span class="parameter">serviceType</span>,
	<span class="identifier">Func</span>&lt;<span class="identifier">DecoratorPredicateContext</span>, <span class="identifier">Type</span>&gt; <span class="parameter">decoratorTypeFactory</span>,
	<span class="identifier">Lifestyle</span> <span class="parameter">lifestyle</span>,
	<span class="identifier">Predicate</span>&lt;<span class="identifier">DecoratorPredicateContext</span>&gt; <span class="parameter">predicate</span>
)</pre></div><div id="ID0ECCA_code_Div2" class="OH_CodeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">Public</span> <span class="keyword">Sub</span> <span class="identifier">RegisterDecorator</span> ( 
	<span class="parameter">serviceType</span> <span class="keyword">As</span> <span class="identifier">Type</span>,
	<span class="parameter">decoratorTypeFactory</span> <span class="keyword">As</span> <span class="identifier">Func</span>(<span class="keyword">Of</span> <span class="identifier">DecoratorPredicateContext</span>, <span class="identifier">Type</span>),
	<span class="parameter">lifestyle</span> <span class="keyword">As</span> <span class="identifier">Lifestyle</span>,
	<span class="parameter">predicate</span> <span class="keyword">As</span> <span class="identifier">Predicate</span>(<span class="keyword">Of</span> <span class="identifier">DecoratorPredicateContext</span>)
)</pre></div><div id="ID0ECCA_code_Div3" class="OH_CodeSnippetContainerCode" style="display: none"><pre xml:space="preserve" /></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0ECCA");</script><h4 class="subHeading">Parameters</h4><dl><dt><span class="parameter">serviceType</span></dt><dd>Type: <a href="https://docs.microsoft.com/dotnet/api/system.type" target="_blank">System<span id="LST88C8D0A5_5"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88C8D0A5_5?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>Type</a><br />The definition of the (possibly open generic) service type that will
             be wrapped by the decorator type that is returned from <span class="parameter">decoratorTypeFactory</span>.</dd><dt><span class="parameter">decoratorTypeFactory</span></dt><dd>Type: <a href="https://docs.microsoft.com/dotnet/api/system.func-2" target="_blank">System<span id="LST88C8D0A5_6"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88C8D0A5_6?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>Func</a><span id="LST88C8D0A5_7"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88C8D0A5_7?cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=(");</script><a href="T_SimpleInjector_DecoratorPredicateContext.htm">DecoratorPredicateContext</a>, <a href="https://docs.microsoft.com/dotnet/api/system.type" target="_blank">Type</a><span id="LST88C8D0A5_8"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88C8D0A5_8?cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)");</script><br />A factory that allows building Type objects that define the
             decorators to inject, based on the given contextual information. The delegate is allowed to return
             (partially) open-generic types.</dd><dt><span class="parameter">lifestyle</span></dt><dd>Type: <a href="T_SimpleInjector_Lifestyle.htm">SimpleInjector<span id="LST88C8D0A5_9"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88C8D0A5_9?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>Lifestyle</a><br />The lifestyle that specifies how the returned decorator will be cached.</dd><dt><span class="parameter">predicate</span></dt><dd>Type: <a href="https://docs.microsoft.com/dotnet/api/system.predicate-1" target="_blank">System<span id="LST88C8D0A5_10"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88C8D0A5_10?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>Predicate</a><span id="LST88C8D0A5_11"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88C8D0A5_11?cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=(");</script><a href="T_SimpleInjector_DecoratorPredicateContext.htm">DecoratorPredicateContext</a><span id="LST88C8D0A5_12"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88C8D0A5_12?cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)");</script><br />The predicate that determines whether the decorator must be applied to a
             service type.</dd></dl><div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Exceptions</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"> </div><div class="tableSection"><table><tr><th class="ps_exceptionNameColumn">Exception</th><th class="ps_exceptionConditionColumn">Condition</th></tr><tr><td><a href="https://docs.microsoft.com/dotnet/api/system.argumentnullexception" target="_blank">ArgumentNullException</a></td><td>Thrown when one of the arguments is a null reference.</td></tr></table></div><div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Remarks</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"> </div><p>
             The types returned from the <span class="parameter">decoratorTypeFactory</span> may be non-generic,
             closed-generic, open-generic and even partially-closed generic. The container will try to fill in
             the generic parameters based on the resolved service type.
             </p><p>
             The <b>RegisterDecorator</b> method works by hooking onto the container's
             <a href="E_SimpleInjector_Container_ExpressionBuilt.htm">ExpressionBuilt</a> event. This event fires after the
             <a href="E_SimpleInjector_Container_ResolveUnregisteredType.htm">ResolveUnregisteredType</a> event, which allows
             decoration of types that are resolved using unregistered type resolution.
             </p><p>
             Multiple decorators can be applied to the same service type. The order in which they are registered
             is the order they get applied in. This means that the decorator that gets registered first, gets
             applied first, which means that the next registered decorator, will wrap the first decorator, which
             wraps the original service type.
             </p><p>
             Constructor injection will be used on that type, and although it may have many constructor
             arguments, it must have exactly one argument of the type of <span class="parameter">serviceType</span>, or an
             argument of type <a href="https://docs.microsoft.com/dotnet/api/system.func-1" target="_blank">Func<span id="LST88C8D0A5_13"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88C8D0A5_13?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>TResult<span id="LST88C8D0A5_14"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88C8D0A5_14?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a> where <b>TResult</b> is <span class="parameter">serviceType</span>.
             An exception will be thrown when this is not the case.
             </p><p>
             The type returned from <span class="parameter">decoratorTypeFactory</span> may have a constructor with an
             argument of type <a href="https://docs.microsoft.com/dotnet/api/system.func-1" target="_blank">Func<span id="LST88C8D0A5_15"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88C8D0A5_15?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>TResult<span id="LST88C8D0A5_16"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88C8D0A5_16?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a> where <b>T</b> is <span class="parameter">serviceType</span>. In this
             case, the library will not inject the decorated <span class="parameter">serviceType</span> itself into the
             decorator instance, but it will inject a <a href="https://docs.microsoft.com/dotnet/api/system.func-1" target="_blank">Func<span id="LST88C8D0A5_17"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88C8D0A5_17?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>TResult<span id="LST88C8D0A5_18"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88C8D0A5_18?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a> that allows
             creating instances of the decorated type, according to the lifestyle of that type. This enables
             more advanced scenarios, such as executing the decorated types on a different thread, or executing
             decorated instance within a certain scope (such as a lifetime scope).
             </p><div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Examples</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"> </div>
             The following is an example of the registration of a decorator through the factory delegate:
             <div class="OH_CodeSnippetContainer"><div class="OH_CodeSnippetContainerTabs"><div class="OH_CodeSnippetContainerTabLeftActive" id="ID0EADFBA_tabimgleft"> </div><div id="ID0EADFBA_tab1" class="OH_CodeSnippetContainerTabSolo">C#</div><div class="OH_CodeSnippetContainerTabRightActive" id="ID0EADFBA_tabimgright"> </div></div><div class="OH_CodeSnippetContainerCodeCollection"><div class="OH_CodeSnippetToolBar"><div class="OH_CodeSnippetToolBarText"><a id="ID0EADFBA_copyCode" href="#" class="OH_copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EADFBA');return false;" title="Copy">Copy</a></div></div><div id="ID0EADFBA_code_Div1" class="OH_CodeSnippetContainerCode" style="display: block"><pre xml:space="preserve">container.Register&lt;ICommandHandler&lt;MoveCustomerCommand&gt;, MoveCustomerCommandHandler&gt;();

container.RegisterDecorator(
    <span class="highlight-keyword">typeof</span>(ICommandHandler&lt;&gt;),
    context =&gt; <span class="highlight-keyword">typeof</span>(LoggingCommandHandler&lt;,&gt;).MakeGenericType(
        <span class="highlight-keyword">typeof</span>(LoggingCommandHandler&lt;,&gt;).GetGenericArguments().First(),
        context.ImplementationType),
    Lifestyle.Transient,
    context =&gt; <span class="highlight-keyword">true</span>);

<span class="highlight-keyword">var</span> handler = container.GetInstance&lt;ICommandHandler&lt;MoveCustomerCommand&gt;&gt;();

Assert.IsInstanceOfType(handler,
    <span class="highlight-keyword">typeof</span>(LoggingCommandHandler&lt;MoveCustomerCommand, MoveCustomerCommandHandler&gt;));</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EADFBA");</script>
             The code above allows a generic <b>LoggingCommandHandler&lt;TCommand, TImplementation&gt;</b> to
             be applied to command handlers, where the second generic argument will be filled in using the
             contextual information.
             <div class="OH_CollapsibleAreaRegion" id="seeAlsoSection"><div class="OH_regiontitle">See Also</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"> </div><h4 class="subHeading">Reference</h4><div class="seeAlsoStyle"><a href="T_SimpleInjector_Container.htm">Container Class</a></div><div class="seeAlsoStyle"><a href="Overload_SimpleInjector_Container_RegisterDecorator.htm">RegisterDecorator Overload</a></div><div class="seeAlsoStyle"><a href="N_SimpleInjector.htm">SimpleInjector Namespace</a></div></div></div></div></div><div id="OH_footer" class="OH_footer"><p>Copyright (c) Simple Injector Contributors</p> </div></body></html>