<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><style type="text/css">.OH_CodeSnippetContainerTabLeftActive, .OH_CodeSnippetContainerTabLeft,.OH_CodeSnippetContainerTabLeftDisabled { }.OH_CodeSnippetContainerTabRightActive, .OH_CodeSnippetContainerTabRight,.OH_CodeSnippetContainerTabRightDisabled { }.OH_footer { }</style><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>Lifestyle.CreateCustom Method </title><meta name="Language" content="en-us" /><meta name="System.Keywords" content="CreateCustom method" /><meta name="System.Keywords" content="Lifestyle.CreateCustom method" /><meta name="Microsoft.Help.F1" content="SimpleInjector.Lifestyle.CreateCustom" /><meta name="Microsoft.Help.Id" content="M:SimpleInjector.Lifestyle.CreateCustom(System.String,SimpleInjector.CreateLifestyleApplier)" /><meta name="Description" content="Creates a custom lifestyle using the supplied delegate." /><meta name="Microsoft.Help.ContentType" content="Reference" /><meta name="BrandingAware" content="true" /><meta name="container" content="SimpleInjector" /><meta name="file" content="M_SimpleInjector_Lifestyle_CreateCustom" /><meta name="guid" content="M_SimpleInjector_Lifestyle_CreateCustom" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><script type="text/javascript" src="../scripts/clipboard.min.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="OH_outerDiv"><div class="OH_outerContent"><table class="TitleTable"><tr><td class="OH_tdTitleColumn"><h1>Lifestyle<span id="LSTE20C352D_0"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE20C352D_0?cpp=::|nu=.");</script>CreateCustom Method </h1></td><td class="OH_tdRunningTitleColumn">Simple Injector</td></tr></table><div id="mainSection"><div id="mainBody"><span class="introStyle"></span> <div class="summary">
             Creates a custom lifestyle using the supplied <span class="parameter">lifestyleApplierFactory</span> delegate.
             </div><p> </p>
    <strong>Namespace:</strong> 
   <a href="N_SimpleInjector.htm">SimpleInjector</a><br />
    <strong>Assembly:</strong>
   SimpleInjector (in SimpleInjector.dll) Version: 5.0.0<div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Syntax</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"> </div><div class="OH_CodeSnippetContainer"><div class="OH_CodeSnippetContainerTabs"><div class="OH_CodeSnippetContainerTabLeft" id="ID0ECCA_tabimgleft"> </div><div id="ID0ECCA_tab1" class="OH_CodeSnippetContainerTabFirst"><a href="#" onclick="javascript:ChangeTab('ID0ECCA','cs','1','3');return false;">C#</a></div><div id="ID0ECCA_tab2" class="OH_CodeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0ECCA','vb','2','3');return false;">VB</a></div><div id="ID0ECCA_tab3" class="OH_CodeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0ECCA','asp','3','3');return false;">ASP.NET</a></div><div class="OH_CodeSnippetContainerTabRight" id="ID0ECCA_tabimgright"> </div></div><div class="OH_CodeSnippetContainerCodeCollection"><div class="OH_CodeSnippetToolBar"><div class="OH_CodeSnippetToolBarText"><a id="ID0ECCA_copyCode" href="#" class="OH_copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0ECCA');return false;" title="Copy">Copy</a></div></div><div id="ID0ECCA_code_Div1" class="OH_CodeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">static</span> <span class="identifier">Lifestyle</span> <span class="identifier">CreateCustom</span>(
	<span class="identifier">string</span> <span class="parameter">name</span>,
	<span class="identifier">CreateLifestyleApplier</span> <span class="parameter">lifestyleApplierFactory</span>
)</pre></div><div id="ID0ECCA_code_Div2" class="OH_CodeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">Public</span> <span class="keyword">Shared</span> <span class="keyword">Function</span> <span class="identifier">CreateCustom</span> ( 
	<span class="parameter">name</span> <span class="keyword">As</span> <span class="identifier">String</span>,
	<span class="parameter">lifestyleApplierFactory</span> <span class="keyword">As</span> <span class="identifier">CreateLifestyleApplier</span>
) <span class="keyword">As</span> <span class="identifier">Lifestyle</span></pre></div><div id="ID0ECCA_code_Div3" class="OH_CodeSnippetContainerCode" style="display: none"><pre xml:space="preserve" /></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0ECCA");</script><h4 class="subHeading">Parameters</h4><dl><dt><span class="parameter">name</span></dt><dd>Type: <a href="https://docs.microsoft.com/dotnet/api/system.string" target="_blank">System<span id="LSTE20C352D_1"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE20C352D_1?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>String</a><br />The name of the lifestyle to create. The name is used to display the lifestyle
             in the debugger.</dd><dt><span class="parameter">lifestyleApplierFactory</span></dt><dd>Type: <a href="T_SimpleInjector_CreateLifestyleApplier.htm">SimpleInjector<span id="LSTE20C352D_2"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE20C352D_2?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>CreateLifestyleApplier</a><br />A factory delegate that takes a <b>Func&lt;object&gt;</b> delegate
             that will produce a transient instance and returns a delegate that returns cached instances.</dd></dl><h4 class="subHeading">Return Value</h4>Type: <a href="T_SimpleInjector_Lifestyle.htm">Lifestyle</a><br />A new <a href="T_SimpleInjector_Lifestyle.htm">Lifestyle</a>.<div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Exceptions</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"> </div><div class="tableSection"><table><tr><th class="ps_exceptionNameColumn">Exception</th><th class="ps_exceptionConditionColumn">Condition</th></tr><tr><td><a href="https://docs.microsoft.com/dotnet/api/system.argumentnullexception" target="_blank">ArgumentNullException</a></td><td>Thrown when one of the arguments is a null reference.
             </td></tr><tr><td><a href="https://docs.microsoft.com/dotnet/api/system.argumentexception" target="_blank">ArgumentException</a></td><td>Thrown when <span class="parameter">name</span> is an empty string.</td></tr></table></div><div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Remarks</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"> </div>
             The supplied <span class="parameter">lifestyleApplierFactory</span> will be called just once per registered
             service. The supplied <span class="parameter">lifestyleApplierFactory</span> will be called by the framework
             when the type is resolved for the first time, and the framework will supply the factory with a
             <b>Func&lt;object&gt;</b> for creating new (transient) instances of that type (that might
             have been <a href="E_SimpleInjector_Container_ExpressionBuilding.htm">intercepted</a> and
             <a href="M_SimpleInjector_Container_RegisterInitializer__1.htm">initializers</a> might have been applied).
             It is the job of the <span class="parameter">lifestyleApplierFactory</span> to return a <b>Func&lt;object&gt;</b>
             that applies the proper caching. The <b>Func&lt;object&gt;</b> that is returned by the
             <span class="parameter">lifestyleApplierFactory</span> will be stored for that registration (every
             registration will store its own <b>Func&lt;object&gt;</b> delegate) and this delegate will be
             called every time the service is resolved (by calling
             <div class="OH_CodeSnippetContainer"><div class="OH_CodeSnippetContainerCodeCollection"><div class="OH_CodeSnippetToolBar"><div class="OH_CodeSnippetToolBarText"><a id="ID0EABGBA_copyCode" href="#" class="OH_copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EABGBA');return false;" title="Copy">Copy</a></div></div><div id="ID0EABGBA_code_Div1" class="OH_CodeSnippetContainerCode" style="display: block"><pre xml:space="preserve">container.GetInstance&lt;TService&gt;</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EABGBA");</script> or when that service is injected into another
             type).
             <div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Examples</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"> </div>
             The following example shows the creation of a lifestyle that caches registered instances for 10
             minutes:
             <div class="OH_CodeSnippetContainer"><div class="OH_CodeSnippetContainerTabs"><div class="OH_CodeSnippetContainerTabLeftActive" id="ID0EAAABA_tabimgleft"> </div><div id="ID0EAAABA_tab1" class="OH_CodeSnippetContainerTabSolo">C#</div><div class="OH_CodeSnippetContainerTabRightActive" id="ID0EAAABA_tabimgright"> </div></div><div class="OH_CodeSnippetContainerCodeCollection"><div class="OH_CodeSnippetToolBar"><div class="OH_CodeSnippetToolBarText"><a id="ID0EAAABA_copyCode" href="#" class="OH_copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EAAABA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAAABA_code_Div1" class="OH_CodeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">var</span> customLifestyle = Lifestyle.CreateCustom(<span class="highlight-literal">"Absolute 10 Minute Expiration"</span>, instanceCreator =&gt;
{
    TimeSpan timeout = TimeSpan.FromMinutes(<span class="highlight-number">10</span>);
    <span class="highlight-keyword">var</span> syncRoot = <span class="highlight-keyword">new</span> <span class="highlight-keyword">object</span>();
    <span class="highlight-keyword">var</span> expirationTime = DateTime.MinValue;
    <span class="highlight-keyword">object</span> instance = <span class="highlight-keyword">null</span>;

    <span class="highlight-comment">// If the application has multiple registrations using this lifestyle, each registration</span>
    <span class="highlight-comment">// will get its own Func&lt;object&gt; delegate (created here) and therefore get its own set</span>
    <span class="highlight-comment">// of variables as defined above.</span>
    <span class="highlight-keyword">return</span> () =&gt;
    {
        <span class="highlight-keyword">lock</span> (syncRoot)
        {
            <span class="highlight-keyword">if</span> (expirationTime &lt; DateTime.UtcNow)
            {
                instance = instanceCreator();
                expirationTime = DateTime.UtcNow.Add(timeout);
            }

            <span class="highlight-keyword">return</span> instance;
        }
    };
});

<span class="highlight-keyword">var</span> container = <span class="highlight-keyword">new</span> Container();

<span class="highlight-comment">// We can reuse the created lifestyle for multiple registrations.</span>
container.Register&lt;IService, MyService&gt;(customLifestyle);
container.Register&lt;AnotherService, MeTwoService&gt;(customLifestyle);</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAABA");</script><div class="OH_CollapsibleAreaRegion" id="seeAlsoSection"><div class="OH_regiontitle">See Also</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"> </div><h4 class="subHeading">Reference</h4><div class="seeAlsoStyle"><a href="T_SimpleInjector_Lifestyle.htm">Lifestyle Class</a></div><div class="seeAlsoStyle"><a href="N_SimpleInjector.htm">SimpleInjector Namespace</a></div></div></div></div></div><div id="OH_footer" class="OH_footer"><p>Copyright (c) Simple Injector Contributors</p> </div></body></html>