<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><style type="text/css">.OH_CodeSnippetContainerTabLeftActive, .OH_CodeSnippetContainerTabLeft,.OH_CodeSnippetContainerTabLeftDisabled { }.OH_CodeSnippetContainerTabRightActive, .OH_CodeSnippetContainerTabRight,.OH_CodeSnippetContainerTabRightDisabled { }.OH_footer { }</style><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>Container.AddRegistration Method (Type, Registration)</title><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Id" content="M:SimpleInjector.Container.AddRegistration(System.Type,SimpleInjector.Registration)" /><meta name="Description" content="Adds the for the supplied . This method can be used to apply the same to multiple different service types." /><meta name="Microsoft.Help.ContentType" content="Reference" /><meta name="BrandingAware" content="true" /><meta name="container" content="SimpleInjector" /><meta name="file" content="M_SimpleInjector_Container_AddRegistration" /><meta name="guid" content="M_SimpleInjector_Container_AddRegistration" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><script type="text/javascript" src="../scripts/clipboard.min.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="OH_outerDiv"><div class="OH_outerContent"><table class="TitleTable"><tr><td class="OH_tdTitleColumn"><h1>Container<span id="LST74BA0E64_0"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST74BA0E64_0?cpp=::|nu=.");</script>AddRegistration Method (Type, Registration)</h1></td><td class="OH_tdRunningTitleColumn">Simple Injector</td></tr></table><div id="mainSection"><div id="mainBody"><span class="introStyle"></span> <div class="summary">
            Adds the <span class="parameter">registration</span> for the supplied <span class="parameter">serviceType</span>. This
            method can be used to apply the same <a href="T_SimpleInjector_Registration.htm">Registration</a> to multiple different service
            types.
            </div><p> </p>
    <strong>Namespace:</strong> 
   <a href="N_SimpleInjector.htm">SimpleInjector</a><br />
    <strong>Assembly:</strong>
   SimpleInjector (in SimpleInjector.dll) Version: 4.1.3<div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Syntax</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"> </div><div class="OH_CodeSnippetContainer"><div class="OH_CodeSnippetContainerTabs"><div class="OH_CodeSnippetContainerTabLeft" id="ID0ECCA_tabimgleft"> </div><div id="ID0ECCA_tab1" class="OH_CodeSnippetContainerTabFirst"><a href="#" onclick="javascript:ChangeTab('ID0ECCA','cs','1','3');return false;">C#</a></div><div id="ID0ECCA_tab2" class="OH_CodeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0ECCA','vb','2','3');return false;">VB</a></div><div id="ID0ECCA_tab3" class="OH_CodeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0ECCA','asp','3','3');return false;">ASP.NET</a></div><div class="OH_CodeSnippetContainerTabRight" id="ID0ECCA_tabimgright"> </div></div><div class="OH_CodeSnippetContainerCodeCollection"><div class="OH_CodeSnippetToolBar"><div class="OH_CodeSnippetToolBarText"><a id="ID0ECCA_copyCode" href="#" class="OH_copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0ECCA');return false;" title="Copy">Copy</a></div></div><div id="ID0ECCA_code_Div1" class="OH_CodeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">void</span> <span class="identifier">AddRegistration</span>(
	<span class="identifier">Type</span> <span class="parameter">serviceType</span>,
	<span class="identifier">Registration</span> <span class="parameter">registration</span>
)</pre></div><div id="ID0ECCA_code_Div2" class="OH_CodeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">Public</span> <span class="keyword">Sub</span> <span class="identifier">AddRegistration</span> ( 
	<span class="parameter">serviceType</span> <span class="keyword">As</span> <span class="identifier">Type</span>,
	<span class="parameter">registration</span> <span class="keyword">As</span> <span class="identifier">Registration</span>
)</pre></div><div id="ID0ECCA_code_Div3" class="OH_CodeSnippetContainerCode" style="display: none"><pre xml:space="preserve" /></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0ECCA");</script><h4 class="subHeading">Parameters</h4><dl><dt><span class="parameter">serviceType</span></dt><dd>Type: <a href="http://msdn2.microsoft.com/en-us/library/42892f65" target="_blank">System<span id="LST74BA0E64_1"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST74BA0E64_1?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>Type</a><br />The base type or interface to register.</dd><dt><span class="parameter">registration</span></dt><dd>Type: <a href="T_SimpleInjector_Registration.htm">SimpleInjector<span id="LST74BA0E64_2"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST74BA0E64_2?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>Registration</a><br />The registration that should be stored for the given 
            <span class="parameter">serviceType</span>.</dd></dl><div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Exceptions</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"> </div><div class="tableSection"><table><tr><th class="ps_exceptionNameColumn">Exception</th><th class="ps_exceptionConditionColumn">Condition</th></tr><tr><td><a href="http://msdn2.microsoft.com/en-us/library/27426hcy" target="_blank">ArgumentNullException</a></td><td>Thrown when one of the supplied arguments is a null
            reference (Nothing in VB).</td></tr><tr><td><a href="http://msdn2.microsoft.com/en-us/library/3w1b3114" target="_blank">ArgumentException</a></td><td>Thrown when <span class="parameter">serviceType</span> is not a reference
            type, is open generic, is ambiguous, when it is not assignable from the 
            <span class="parameter">registration</span>'s <a href="P_SimpleInjector_Registration_ImplementationType.htm">ImplementationType</a>
            or when the supplied <span class="parameter">registration</span> is created for a different 
            <a href="T_SimpleInjector_Container.htm">Container</a> instance.</td></tr><tr><td><a href="http://msdn2.microsoft.com/en-us/library/2asft85a" target="_blank">InvalidOperationException</a></td><td>
            Thrown when this container instance is locked and can not be altered, or when an 
            the <span class="parameter">serviceType</span> has already been registered.
            </td></tr></table></div><div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Examples</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"> </div><div class="OH_CodeSnippetContainer"><div class="OH_CodeSnippetContainerTabs"><div class="OH_CodeSnippetContainerTabLeftActive" id="ID0EANDBA_tabimgleft"> </div><div id="ID0EANDBA_tab1" class="OH_CodeSnippetContainerTabSolo">C#</div><div class="OH_CodeSnippetContainerTabRightActive" id="ID0EANDBA_tabimgright"> </div></div><div class="OH_CodeSnippetContainerCodeCollection"><div class="OH_CodeSnippetToolBar"><div class="OH_CodeSnippetToolBarText"><a id="ID0EANDBA_copyCode" href="#" class="OH_copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EANDBA');return false;" title="Copy">Copy</a></div></div><div id="ID0EANDBA_code_Div1" class="OH_CodeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">public</span> <span class="highlight-keyword">interface</span> IFoo { }
<span class="highlight-keyword">public</span> <span class="highlight-keyword">interface</span> IBar { }
<span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> FooBar : IFoo, IBar { }

<span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> AddRegistration_SuppliedWithSameSingletonRegistrationTwice_ReturnsSameInstance()
{
    <span class="highlight-comment">// Arrange</span>
    Registration registration =
        Lifestyle.Singleton.CreateRegistration&lt;FooBar, FooBar&gt;(container);

    container.AddRegistration(<span class="highlight-keyword">typeof</span>(IFoo), registration);
    container.AddRegistration(<span class="highlight-keyword">typeof</span>(IBar), registration);

    <span class="highlight-comment">// Act</span>
    IFoo foo = container.GetInstance&lt;IFoo&gt;();
    IBar bar  = container.GetInstance&lt;IBar&gt;();

    <span class="highlight-comment">// Assert</span>
    <span class="highlight-keyword">bool</span> fooAndBareAreTheSameInstance = <span class="highlight-keyword">object</span>.ReferenceEquals(foo, bar);
    Assert.IsTrue(fooAndBareAreTheSameInstance);
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EANDBA");</script><p>
            In the example above a singleton registration is created for type <span class="code">FooBar</span> and this 
            registration is added to the container for each interface (<span class="code">IFoo</span> and <span class="code">IBar</span>) that it
            implements. Since both services use the same singleton registration, requesting those services 
            will result in the return of the same (singleton) instance.
            </p><p><a href="E_SimpleInjector_Container_ExpressionBuilding.htm">ExpressionBuilding</a> events are applied to the <a href="http://msdn2.microsoft.com/en-us/library/bb356138" target="_blank">Expression</a> of the
            <a href="T_SimpleInjector_Registration.htm">Registration</a> instance and are therefore applied once. <a href="E_SimpleInjector_Container_ExpressionBuilt.htm">ExpressionBuilt</a> 
            events on the other hand get applied to the <b>Expression</b> of the <a href="T_SimpleInjector_InstanceProducer.htm">InstanceProducer</a>.
            Since each <b>AddRegistration</b> gets its own instance producer (that wraps the 
            <b>Registration</b> instance), this means that the <b>ExpressionBuilt</b> events will be 
            applied for each registered service type.
            </p><p>
            The most practical example of this is the use of decorators using one of the 
            <a href="M_SimpleInjector_Container_RegisterDecorator_1.htm">RegisterDecorator</a> overloads (decorator registration 
            use the <b>ExpressionBuilt</b> event under the covers). Take a look at the following example:
            </p><div class="OH_CodeSnippetContainer"><div class="OH_CodeSnippetContainerTabs"><div class="OH_CodeSnippetContainerTabLeftActive" id="ID0EAJDBA_tabimgleft"> </div><div id="ID0EAJDBA_tab1" class="OH_CodeSnippetContainerTabSolo">C#</div><div class="OH_CodeSnippetContainerTabRightActive" id="ID0EAJDBA_tabimgright"> </div></div><div class="OH_CodeSnippetContainerCodeCollection"><div class="OH_CodeSnippetToolBar"><div class="OH_CodeSnippetToolBarText"><a id="ID0EAJDBA_copyCode" href="#" class="OH_copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EAJDBA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAJDBA_code_Div1" class="OH_CodeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">public</span> <span class="highlight-keyword">interface</span> IFoo { }
<span class="highlight-keyword">public</span> <span class="highlight-keyword">interface</span> IBar { }
<span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> FooBar : IFoo, IBar { }

<span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> BarDecorator : IBar
{
    <span class="highlight-keyword">public</span> BarDecorator(IBar decoratedBar)
    {
        <span class="highlight-keyword">this</span>.DecoratedBar = decoratedBar;
    }

    <span class="highlight-keyword">public</span> IBar DecoratedBar { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">private</span> <span class="highlight-keyword">set</span>; }
}

<span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> AddRegistration_SameSingletonRegistrationTwiceAndOneDecoratorApplied_ReturnsSameInstance()
{
    <span class="highlight-comment">// Arrange</span>
    Registration registration =
        Lifestyle.Singleton.CreateRegistration&lt;FooBar, FooBar&gt;(container);

    container.AddRegistration(<span class="highlight-keyword">typeof</span>(IFoo), registration);
    container.AddRegistration(<span class="highlight-keyword">typeof</span>(IBar), registration);

    <span class="highlight-comment">// Registere a decorator for IBar, but not for IFoo</span>
    container.RegisterDecorator(<span class="highlight-keyword">typeof</span>(IBar), <span class="highlight-keyword">typeof</span>(BarDecorator));

    <span class="highlight-comment">// Act</span>
    <span class="highlight-keyword">var</span> foo = container.GetInstance&lt;IFoo&gt;();
    <span class="highlight-keyword">var</span> decorator = container.GetInstance&lt;IBar&gt;() <span class="highlight-keyword">as</span> BarDecorator;
    <span class="highlight-keyword">var</span> bar = decorator.DecoratedBar;

    <span class="highlight-comment">// Assert</span>
    <span class="highlight-keyword">bool</span> fooAndBareAreTheSameInstance = <span class="highlight-keyword">object</span>.ReferenceEquals(foo, bar);
    Assert.IsTrue(fooAndBareAreTheSameInstance);
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAJDBA");</script>
            The example shows that the decorator gets applied to <span class="code">IBar</span> but not to <span class="code">IFoo</span>, but that
            the decorated <span class="code">IBar</span> is still the same instance as the resolved <span class="code">IFoo</span> instance.
            <div class="OH_CollapsibleAreaRegion" id="seeAlsoSection"><div class="OH_regiontitle">See Also</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"> </div><h4 class="subHeading">Reference</h4><div class="seeAlsoStyle"><a href="T_SimpleInjector_Container.htm">Container Class</a></div><div class="seeAlsoStyle"><a href="Overload_SimpleInjector_Container_AddRegistration.htm">AddRegistration Overload</a></div><div class="seeAlsoStyle"><a href="N_SimpleInjector.htm">SimpleInjector Namespace</a></div></div></div></div></div><div id="OH_footer" class="OH_footer"><p>Copyright (c) 2010 - 2015 Simple Injector Contributors</p> </div></body></html>