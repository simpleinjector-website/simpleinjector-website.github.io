<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><style type="text/css">.OH_CodeSnippetContainerTabLeftActive, .OH_CodeSnippetContainerTabLeft,.OH_CodeSnippetContainerTabLeftDisabled { }.OH_CodeSnippetContainerTabRightActive, .OH_CodeSnippetContainerTabRight,.OH_CodeSnippetContainerTabRightDisabled { }.OH_footer { }</style><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>InstanceProducer Class</title><meta name="Language" content="en-us" /><meta name="System.Keywords" content="InstanceProducer class" /><meta name="System.Keywords" content="SimpleInjector.InstanceProducer class" /><meta name="Microsoft.Help.F1" content="SimpleInjector.InstanceProducer" /><meta name="Microsoft.Help.Id" content="T:SimpleInjector.InstanceProducer" /><meta name="Description" content="Produces instances for a given registration. Instances of this type are generally created by the container when calling one of the Register overloads. Instances can be retrieved by calling GetCurrentRegistrations() or GetRegistration(Type, bool)." /><meta name="Microsoft.Help.ContentType" content="Reference" /><meta name="BrandingAware" content="true" /><meta name="container" content="SimpleInjector" /><meta name="file" content="T_SimpleInjector_InstanceProducer" /><meta name="guid" content="T_SimpleInjector_InstanceProducer" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><script type="text/javascript" src="../scripts/clipboard.min.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="OH_outerDiv"><div class="OH_outerContent"><table class="TitleTable"><tr><td class="OH_tdTitleColumn"><h1>InstanceProducer Class</h1></td><td class="OH_tdRunningTitleColumn">Simple Injector</td></tr></table><div id="mainSection"><div id="mainBody"><span class="introStyle"></span> <div class="summary">
            Produces instances for a given registration. Instances of this type are generally created by the
            container when calling one of the <b>Register</b> overloads. Instances can be retrieved by calling
            <a href="M_SimpleInjector_Container_GetCurrentRegistrations.htm">GetCurrentRegistrations()</a> or 
            <a href="M_SimpleInjector_Container_GetRegistration_1.htm">GetRegistration(Type, bool)</a>.
            </div><div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Inheritance Hierarchy</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"> </div><a href="http://msdn2.microsoft.com/en-us/library/e5kfa45b" target="_blank">System<span id="LST28E43AE8_0"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST28E43AE8_0?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>Object</a><br />  <span class="selflink">SimpleInjector<span id="LST28E43AE8_1"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST28E43AE8_1?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>InstanceProducer</span><br />    <a href="T_SimpleInjector_InstanceProducer_1.htm">SimpleInjector<span id="LST28E43AE8_2"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST28E43AE8_2?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>InstanceProducer<span id="LST28E43AE8_3"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST28E43AE8_3?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>TService<span id="LST28E43AE8_4"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST28E43AE8_4?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a><br /><p> </p>
    <strong>Namespace:</strong> 
   <a href="N_SimpleInjector.htm">SimpleInjector</a><br />
    <strong>Assembly:</strong>
   SimpleInjector (in SimpleInjector.dll) Version: 4.6.0<div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Syntax</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"> </div><div class="OH_CodeSnippetContainer"><div class="OH_CodeSnippetContainerTabs"><div class="OH_CodeSnippetContainerTabLeft" id="ID0ECCA_tabimgleft"> </div><div id="ID0ECCA_tab1" class="OH_CodeSnippetContainerTabFirst"><a href="#" onclick="javascript:ChangeTab('ID0ECCA','cs','1','3');return false;">C#</a></div><div id="ID0ECCA_tab2" class="OH_CodeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0ECCA','vb','2','3');return false;">VB</a></div><div id="ID0ECCA_tab3" class="OH_CodeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0ECCA','asp','3','3');return false;">ASP.NET</a></div><div class="OH_CodeSnippetContainerTabRight" id="ID0ECCA_tabimgright"> </div></div><div class="OH_CodeSnippetContainerCodeCollection"><div class="OH_CodeSnippetToolBar"><div class="OH_CodeSnippetToolBarText"><a id="ID0ECCA_copyCode" href="#" class="OH_copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0ECCA');return false;" title="Copy">Copy</a></div></div><div id="ID0ECCA_code_Div1" class="OH_CodeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">class</span> <span class="identifier">InstanceProducer</span></pre></div><div id="ID0ECCA_code_Div2" class="OH_CodeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">Public</span> <span class="keyword">Class</span> <span class="identifier">InstanceProducer</span></pre></div><div id="ID0ECCA_code_Div3" class="OH_CodeSnippetContainerCode" style="display: none"><pre xml:space="preserve" /></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0ECCA");</script><p>The <span class="selflink">InstanceProducer</span> type exposes the following members.</p><div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Constructors</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"> </div><table class="members" id="constructorList"><tr><th class="ps_iconColumn">
								 
							</th><th>Name</th><th>Description</th></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_SimpleInjector_InstanceProducer__ctor.htm">InstanceProducer</a></td><td><div class="summary">Initializes a new instance of the <span class="selflink">InstanceProducer</span> class.</div></td></tr></table><a href="#mainBody">Top</a><div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Properties</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"> </div><table class="members" id="propertyList"><tr><th class="ps_iconColumn">
								 
							</th><th>Name</th><th>Description</th></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_SimpleInjector_InstanceProducer_Lifestyle.htm">Lifestyle</a></td><td><div class="summary">
            Gets the <a href="P_SimpleInjector_InstanceProducer_Lifestyle.htm">Lifestyle</a> for this registration. The returned lifestyle can differ from the
            lifestyle that is used during the registration. This can happen for instance when the registration
            is changed by an <a href="E_SimpleInjector_Container_ExpressionBuilt.htm">ExpressionBuilt</a> 
            registration or gets decorated.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_SimpleInjector_InstanceProducer_Registration.htm">Registration</a></td><td><div class="summary">Gets the <a href="P_SimpleInjector_InstanceProducer_Registration.htm">Registration</a> instance for this instance.</div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_SimpleInjector_InstanceProducer_ServiceType.htm">ServiceType</a></td><td><div class="summary">Gets the service type for which this producer produces instances.</div></td></tr></table><a href="#mainBody">Top</a><div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Methods</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"> </div><table class="members" id="methodList"><tr><th class="ps_iconColumn">
								 
							</th><th>Name</th><th>Description</th></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_SimpleInjector_InstanceProducer_BuildExpression.htm">BuildExpression</a></td><td><div class="summary">
            Builds an expression that expresses the intent to get an instance by the current producer. A call 
            to this method locks the container. New registrations can't be made after a call to this method.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_SimpleInjector_InstanceProducer_FromExpression.htm">FromExpression</a></td><td><div class="summary">
            Creates a new <span class="selflink">InstanceProducer</span> based on the given <span class="parameter">serviceType</span> 
            and <span class="parameter">expression</span> where the <span class="parameter">expression</span> will be used as-is;
            no interception (using <a href="E_SimpleInjector_Container_ExpressionBuilt.htm">ExpressionBuilt</a>) such as
            decorators will be applied.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_SimpleInjector_InstanceProducer_GetInstance.htm">GetInstance</a></td><td><div class="summary">Produces an instance.</div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_SimpleInjector_InstanceProducer_GetRelationships.htm">GetRelationships</a></td><td><div class="summary">
            Gets the collection of relationships for this instance that the container knows about.
            This includes relationships between the registered type and its dependencies and relationships 
            between applied decorators and their dependencies. Note that types that are not newed up by the 
            container and properties that are injected inside a custom delegate that is registered using the
            <a href="M_SimpleInjector_Container_RegisterInitializer__1.htm">RegisterInitializer</a> 
            method are unknown to the container and are not returned from this method.
            Also note that this method will return an empty collection when called before the
            registered type is requested from the container (or before 
            <a href="M_SimpleInjector_Container_Verify.htm">Verify</a> is called). 
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_SimpleInjector_InstanceProducer_VisualizeObjectGraph.htm">VisualizeObjectGraph<span id="LST28E43AE8_5"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST28E43AE8_5?cs=()|vb=|cpp=()|nu=()|fs=()");</script></a></td><td><div class="summary">
            Builds a string representation of the object graph with the current instance as root of the
            graph.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_SimpleInjector_InstanceProducer_VisualizeObjectGraph_1.htm">VisualizeObjectGraph(VisualizationOptions)</a></td><td><div class="summary">
            Builds a string representation of the object graph with the current instance as root of the
            graph.
            </div></td></tr></table><a href="#mainBody">Top</a><div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Remarks</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"> </div>
            The <b>Register</b> method overloads create <b>InstanceProducer</b> instances internally, but
            <b>InstanceProducer</b>s can be created manually to implement special scenarios. An 
            <b>InstanceProducer</b> wraps <a href="P_SimpleInjector_InstanceProducer_Registration.htm">Registration</a> instance. The <b>Registration</b> builds an
            <a href="http://msdn2.microsoft.com/en-us/library/bb356138" target="_blank">Expression</a> that describes the intend to create the instance according to a certain
            lifestyle. The <b>InstanceProducer</b> on the other hand transforms this <b>Expression</b> to a
            delegate and allows the actual instance to be created. A <b>Registration</b> itself can't create any
            instance. The <b>InsanceProducer</b> allows intercepting created instances by hooking onto the
            <a href="E_SimpleInjector_Container_ExpressionBuilt.htm">Container.ExpressionBuilt</a> event. The
            <a href="M_SimpleInjector_Container_RegisterDecorator_1.htm">RegisterDecorator</a> methods for 
            instance work by hooking onto the <b>ExpressionBuilt</b> event and allow wrapping the returned instance 
            with a decorator.
            <div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Examples</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"> </div>
            The following example shows the creation of two different <b>InstanceProducer</b> instances that wrap
            the same <b>Registration</b> instance. Since the <b>Registration</b> is created using the 
            <a href="F_SimpleInjector_Lifestyle_Singleton.htm">Singleton</a> lifestyle, both producers will return 
            the same instance. The <b>InstanceProducer</b> for the <div class="OH_CodeSnippetContainer"><div class="OH_CodeSnippetContainerCodeCollection"><div class="OH_CodeSnippetToolBar"><div class="OH_CodeSnippetToolBarText"><a id="ID0EAEABA_copyCode" href="#" class="OH_copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EAEABA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAEABA_code_Div1" class="OH_CodeSnippetContainerCode" style="display: block"><pre xml:space="preserve">Interface1</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAEABA");</script> however, will wrap that
            instance in a (transient) <div class="OH_CodeSnippetContainer"><div class="OH_CodeSnippetContainerCodeCollection"><div class="OH_CodeSnippetToolBar"><div class="OH_CodeSnippetToolBarText"><a id="ID0EACABA_copyCode" href="#" class="OH_copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EACABA');return false;" title="Copy">Copy</a></div></div><div id="ID0EACABA_code_Div1" class="OH_CodeSnippetContainerCode" style="display: block"><pre xml:space="preserve">Interface1Decorator</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EACABA");</script>.
            <div class="OH_CodeSnippetContainer"><div class="OH_CodeSnippetContainerTabs"><div class="OH_CodeSnippetContainerTabLeftActive" id="ID0EAAABA_tabimgleft"> </div><div id="ID0EAAABA_tab1" class="OH_CodeSnippetContainerTabSolo">C#</div><div class="OH_CodeSnippetContainerTabRightActive" id="ID0EAAABA_tabimgright"> </div></div><div class="OH_CodeSnippetContainerCodeCollection"><div class="OH_CodeSnippetToolBar"><div class="OH_CodeSnippetToolBarText"><a id="ID0EAAABA_copyCode" href="#" class="OH_copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EAAABA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAAABA_code_Div1" class="OH_CodeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">var</span> container = <span class="highlight-keyword">new</span> Container();

<span class="highlight-comment">// ServiceImpl implements both Interface1 and Interface2.</span>
<span class="highlight-keyword">var</span> registration = Lifestyle.Singleton.CreateRegistration&lt;ServiceImpl, ServiceImpl&gt;(container);

<span class="highlight-keyword">var</span> producer1 = <span class="highlight-keyword">new</span> InstanceProducer(<span class="highlight-keyword">typeof</span>(Interface1), registration);
<span class="highlight-keyword">var</span> producer2 = <span class="highlight-keyword">new</span> InstanceProducer(<span class="highlight-keyword">typeof</span>(Interface2), registration);

container.RegisterDecorator(<span class="highlight-keyword">typeof</span>(Interface1), <span class="highlight-keyword">typeof</span>(Interface1Decorator));

<span class="highlight-keyword">var</span> instance1 = (Interface1)producer1.GetInstance();
<span class="highlight-keyword">var</span> instance2 = (Interface2)producer2.GetInstance();

Assert.IsInstanceOfType(instance1, <span class="highlight-keyword">typeof</span>(Interface1Decorator));
Assert.IsInstanceOfType(instance2, <span class="highlight-keyword">typeof</span>(ServiceImpl));

Assert.AreSame(((Interface1Decorator)instance1).DecoratedInstance, instance2);</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAABA");</script><div class="OH_CollapsibleAreaRegion" id="seeAlsoSection"><div class="OH_regiontitle">See Also</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"> </div><h4 class="subHeading">Reference</h4><div class="seeAlsoStyle"><a href="N_SimpleInjector.htm">SimpleInjector Namespace</a></div></div></div></div></div><div id="OH_footer" class="OH_footer"><p>Copyright (c) 2010 - 2015 Simple Injector Contributors</p> </div></body></html>