<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><style type="text/css">.OH_CodeSnippetContainerTabLeftActive, .OH_CodeSnippetContainerTabLeft,.OH_CodeSnippetContainerTabLeftDisabled { }.OH_CodeSnippetContainerTabRightActive, .OH_CodeSnippetContainerTabRight,.OH_CodeSnippetContainerTabRightDisabled { }.OH_footer { }</style><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>Container.RegisterDecorator Method (Type, Type)</title><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Id" content="M:SimpleInjector.Container.RegisterDecorator(System.Type,System.Type)" /><meta name="Description" content="Ensures that the supplied decorator is returned, wrapping the original registered , by injecting that service type into the constructor of the supplied . Multiple decorators may be applied to the same ." /><meta name="Microsoft.Help.ContentType" content="Reference" /><meta name="BrandingAware" content="true" /><meta name="container" content="SimpleInjector" /><meta name="file" content="M_SimpleInjector_Container_RegisterDecorator_1" /><meta name="guid" content="M_SimpleInjector_Container_RegisterDecorator_1" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><script type="text/javascript" src="../scripts/clipboard.min.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="OH_outerDiv"><div class="OH_outerContent"><table class="TitleTable"><tr><td class="OH_tdTitleColumn"><h1>Container<span id="LST3C51809A_0"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST3C51809A_0?cpp=::|nu=.");</script>RegisterDecorator Method (Type, Type)</h1></td><td class="OH_tdRunningTitleColumn">Simple Injector</td></tr></table><div id="mainSection"><div id="mainBody"><span class="introStyle"></span> <div class="summary">
             Ensures that the supplied <span class="parameter">decoratorType</span> decorator is returned, wrapping the
             original registered <span class="parameter">serviceType</span>, by injecting that service type into the
             constructor of the supplied <span class="parameter">decoratorType</span>. Multiple decorators may be applied
             to the same <span class="parameter">serviceType</span>. Decorators can be applied to both open, closed, and
             non-generic service types. By default, a new <span class="parameter">decoratorType</span> instance will be
             returned on each request (according the <a href="F_SimpleInjector_Lifestyle_Transient.htm">Transient</a> lifestyle),
             independently of the lifestyle of the wrapped service.
             </div><p> </p>
    <strong>Namespace:</strong> 
   <a href="N_SimpleInjector.htm">SimpleInjector</a><br />
    <strong>Assembly:</strong>
   SimpleInjector (in SimpleInjector.dll) Version: 5.3.0<div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Syntax</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"> </div><div class="OH_CodeSnippetContainer"><div class="OH_CodeSnippetContainerTabs"><div class="OH_CodeSnippetContainerTabLeft" id="ID0ECCA_tabimgleft"> </div><div id="ID0ECCA_tab1" class="OH_CodeSnippetContainerTabFirst"><a href="#" onclick="javascript:ChangeTab('ID0ECCA','cs','1','3');return false;">C#</a></div><div id="ID0ECCA_tab2" class="OH_CodeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0ECCA','vb','2','3');return false;">VB</a></div><div id="ID0ECCA_tab3" class="OH_CodeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0ECCA','asp','3','3');return false;">ASP.NET</a></div><div class="OH_CodeSnippetContainerTabRight" id="ID0ECCA_tabimgright"> </div></div><div class="OH_CodeSnippetContainerCodeCollection"><div class="OH_CodeSnippetToolBar"><div class="OH_CodeSnippetToolBarText"><a id="ID0ECCA_copyCode" href="#" class="OH_copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0ECCA');return false;" title="Copy">Copy</a></div></div><div id="ID0ECCA_code_Div1" class="OH_CodeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">void</span> <span class="identifier">RegisterDecorator</span>(
	<span class="identifier">Type</span> <span class="parameter">serviceType</span>,
	<span class="identifier">Type</span> <span class="parameter">decoratorType</span>
)</pre></div><div id="ID0ECCA_code_Div2" class="OH_CodeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">Public</span> <span class="keyword">Sub</span> <span class="identifier">RegisterDecorator</span> ( 
	<span class="parameter">serviceType</span> <span class="keyword">As</span> <span class="identifier">Type</span>,
	<span class="parameter">decoratorType</span> <span class="keyword">As</span> <span class="identifier">Type</span>
)</pre></div><div id="ID0ECCA_code_Div3" class="OH_CodeSnippetContainerCode" style="display: none"><pre xml:space="preserve" /></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0ECCA");</script><h4 class="subHeading">Parameters</h4><dl><dt><span class="parameter">serviceType</span></dt><dd>Type: <a href="https://docs.microsoft.com/dotnet/api/system.type" target="_blank">System<span id="LST3C51809A_1"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST3C51809A_1?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>Type</a><br />The (possibly open generic) service type that will be wrapped by the
             given <span class="parameter">decoratorType</span>.</dd><dt><span class="parameter">decoratorType</span></dt><dd>Type: <a href="https://docs.microsoft.com/dotnet/api/system.type" target="_blank">System<span id="LST3C51809A_2"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST3C51809A_2?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>Type</a><br />The (possibly the open generic) decorator type that will
             be used to wrap the original service type.</dd></dl><div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Exceptions</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"> </div><div class="tableSection"><table><tr><th class="ps_exceptionNameColumn">Exception</th><th class="ps_exceptionConditionColumn">Condition</th></tr><tr><td><a href="https://docs.microsoft.com/dotnet/api/system.argumentnullexception" target="_blank">ArgumentNullException</a></td><td>Thrown when one of the arguments is a null reference.</td></tr><tr><td><a href="https://docs.microsoft.com/dotnet/api/system.argumentexception" target="_blank">ArgumentException</a></td><td>Thrown when <span class="parameter">serviceType</span>  is not
             an open generic type, when <span class="parameter">decoratorType</span> does not inherit from or implement
             <span class="parameter">serviceType</span>, when <span class="parameter">decoratorType</span> does not
             have a single public constructor, or when <span class="parameter">decoratorType</span> does not
             contain a constructor that has exactly one argument of type
             <span class="parameter">serviceType</span> or <a href="https://docs.microsoft.com/dotnet/api/system.func-1" target="_blank">Func<span id="LST3C51809A_3"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST3C51809A_3?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>TResult<span id="LST3C51809A_4"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST3C51809A_4?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a> where <b>T</b> is
             <span class="parameter">serviceType</span>.</td></tr></table></div><div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Remarks</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"> </div><p>
             This method uses the container's
             <a href="P_SimpleInjector_ContainerOptions_LifestyleSelectionBehavior.htm">LifestyleSelectionBehavior</a> to select
             the exact lifestyle for the specified type. By default this will be
             <a href="F_SimpleInjector_Lifestyle_Transient.htm">Transient</a>.
             </p><p>
             The <b>RegisterDecorator</b> method works by hooking onto the container's
             <a href="E_SimpleInjector_Container_ExpressionBuilt.htm">ExpressionBuilt</a> event. This event fires after the
             <a href="E_SimpleInjector_Container_ResolveUnregisteredType.htm">ResolveUnregisteredType</a> event, which allows
             decoration of types that are resolved using unregistered type resolution.
             </p><p>
             Multiple decorators can be applied to the same service type. The order in which they are registered
             is the order they get applied in. This means that the decorator that gets registered first, gets
             applied first, which means that the next registered decorator, will wrap the first decorator, which
             wraps the original service type.
             </p><p>
             Constructor injection will be used on that type, and although it may have many constructor
             arguments, it must have exactly one argument of the type of <span class="parameter">serviceType</span>, or an
             argument of type <a href="https://docs.microsoft.com/dotnet/api/system.func-1" target="_blank">Func<span id="LST3C51809A_5"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST3C51809A_5?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>TResult<span id="LST3C51809A_6"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST3C51809A_6?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a> where <b>TResult</b> is <span class="parameter">serviceType</span>.
             An exception will be thrown when this is not the case.
             </p><p>
             The registered <span class="parameter">decoratorType</span> may have a constructor with an argument of type
             <a href="https://docs.microsoft.com/dotnet/api/system.func-1" target="_blank">Func<span id="LST3C51809A_7"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST3C51809A_7?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>TResult<span id="LST3C51809A_8"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST3C51809A_8?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a> where <b>T</b> is <span class="parameter">serviceType</span>. In this case, an decorated
             instance will not injected into the <span class="parameter">decoratorType</span>, but it will inject a
             <a href="https://docs.microsoft.com/dotnet/api/system.func-1" target="_blank">Func<span id="LST3C51809A_9"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST3C51809A_9?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>TResult<span id="LST3C51809A_10"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST3C51809A_10?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a> that allows creating instances of the decorated type, according to the
             lifestyle of that type. This enables more advanced scenarios, such as executing the decorated
             types on a different thread, or executing decorated instance within a certain scope (such as a
             lifetime scope).
             </p><div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Examples</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"> </div>
             The following example shows the definition of a generic <b>ICommandHandler&lt;T&gt;</b> interface,
             a <b>CustomerMovedCommandHandler</b> implementing that interface, and a
             <b>ValidatorCommandHandlerDecorator&lt;T&gt;</b> that acts as a decorator for that interface.
             <div class="OH_CodeSnippetContainer"><div class="OH_CodeSnippetContainerTabs"><div class="OH_CodeSnippetContainerTabLeftActive" id="ID0EAAEBA_tabimgleft"> </div><div id="ID0EAAEBA_tab1" class="OH_CodeSnippetContainerTabSolo">C#</div><div class="OH_CodeSnippetContainerTabRightActive" id="ID0EAAEBA_tabimgright"> </div></div><div class="OH_CodeSnippetContainerCodeCollection"><div class="OH_CodeSnippetToolBar"><div class="OH_CodeSnippetToolBarText"><a id="ID0EAAEBA_copyCode" href="#" class="OH_copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EAAEBA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAAEBA_code_Div1" class="OH_CodeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">using</span> System.ComponentModel.DataAnnotations;
<span class="highlight-keyword">using</span> System.Diagnostics;
<span class="highlight-keyword">using</span> System.Linq;

<span class="highlight-keyword">using</span> Microsoft.VisualStudio.TestTools.UnitTesting;

<span class="highlight-keyword">using</span> SimpleInjector;
<span class="highlight-keyword">using</span> SimpleInjector.Extensions;

<span class="highlight-keyword">public</span> <span class="highlight-keyword">interface</span> ICommandHandler&lt;TCommand&gt;
{
    <span class="highlight-keyword">void</span> Handle(TCommand command);
}

<span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> CustomerMovedCommand
{
    [Required]
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">int</span> CustomerId { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">set</span>; }

    [Required]
    <span class="highlight-keyword">public</span> Address Address { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">set</span>; }
}

<span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> CustomerMovedCommandHandler
    : ICommandHandler&lt;CustomerMovedCommand&gt;
{
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> Handle(CustomerMovedCommand command)
    {
        <span class="highlight-comment">// some logic</span>
    }
}

<span class="highlight-comment">// Decorator that validates commands before they get executed.</span>
<span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> ValidatorCommandHandlerDecorator&lt;TCommand&gt;
    : ICommandHandler&lt;TCommand&gt;
{
    <span class="highlight-keyword">private</span> <span class="highlight-keyword">readonly</span> ICommandHandler&lt;TCommand&gt; decoratedHandler;
    <span class="highlight-keyword">private</span> <span class="highlight-keyword">readonly</span> Container container;

    <span class="highlight-keyword">public</span> ValidatorCommandHandlerDecorator(
        ICommandHandler&lt;TCommand&gt; decoratedHandler,
        Container container)
    {
        <span class="highlight-keyword">this</span>.decoratedHandler = decoratedHandler;
        <span class="highlight-keyword">this</span>.container = container;
    }

    <span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> Handle(TCommand command)
    {
        <span class="highlight-keyword">this</span>.Validate(command);

        <span class="highlight-keyword">this</span>.decoratedHandler.Handle(command);
    }

    <span class="highlight-keyword">private</span> <span class="highlight-keyword">void</span> Validate(TCommand command)
    {
        <span class="highlight-keyword">var</span> validationContext =
            <span class="highlight-keyword">new</span> ValidationContext(command, <span class="highlight-keyword">this</span>.container, <span class="highlight-keyword">null</span>);

        Validator.ValidateObject(command, validationContext);
    }
}

<span class="highlight-comment">// Decorator that measures the time it takes to execute a command.</span>
<span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> MonitoringCommandHandlerDecorator&lt;TCommand&gt;
    : ICommandHandler&lt;TCommand&gt;
{
    <span class="highlight-keyword">private</span> <span class="highlight-keyword">readonly</span> ICommandHandler&lt;TCommand&gt; decoratedHandler;
    <span class="highlight-keyword">private</span> <span class="highlight-keyword">readonly</span> ILogger logger;

    <span class="highlight-keyword">public</span> MonitoringCommandHandlerDecorator(
        ICommandHandler&lt;TCommand&gt; decoratedHandler,
        ILogger logger)
    {
        <span class="highlight-keyword">this</span>.decoratedHandler = decoratedHandler;
        <span class="highlight-keyword">this</span>.logger = logger;
    }

    <span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> Handle(TCommand command)
    {
        <span class="highlight-keyword">var</span> watch = Stopwatch.StartNew();

        <span class="highlight-keyword">this</span>.decoratedHandler.Handle(command);

        <span class="highlight-keyword">this</span>.logger.Log(<span class="highlight-keyword">string</span>.Format(<span class="highlight-literal">"{0} executed in {1} ms."</span>,
            command.GetType().Name, watch.ElapsedMilliseconds));
    }
}

[TestMethod]
<span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">void</span> TestRegisterOpenGenericDecorator()
{
    <span class="highlight-comment">// Arrange</span>
    <span class="highlight-keyword">var</span> container = <span class="highlight-keyword">new</span> Container();

    container.Register&lt;ILogger, DebugLogger&gt;(Lifestyle.Singleton);

    <span class="highlight-comment">// Search the given assembly and register all concrete types that</span>
    <span class="highlight-comment">// implement ICommandHandler&lt;TCommand&gt;.</span>
    container.RegisterManyForOpenGeneric(<span class="highlight-keyword">typeof</span>(ICommandHandler&lt;&gt;),
        <span class="highlight-keyword">typeof</span>(ICommandHandler&lt;&gt;).Assembly);

    <span class="highlight-comment">// Wrap all ICommandHandler&lt;TCommand&gt; service types with a decorator</span>
    <span class="highlight-comment">// that measures and logs the duration of that handler.</span>
    container.RegisterDecorator(<span class="highlight-keyword">typeof</span>(ICommandHandler&lt;&gt;),
        <span class="highlight-keyword">typeof</span>(MonitoringCommandHandlerDecorator&lt;&gt;));

    <span class="highlight-comment">// Wrap all ICommandHandler&lt;TCommand&gt; types (in this case it will</span>
    <span class="highlight-comment">// wrap the monitoring decorator), but only if the TCommand contains</span>
    <span class="highlight-comment">// any properties.</span>
    container.RegisterDecorator(<span class="highlight-keyword">typeof</span>(ICommandHandler&lt;&gt;),
        <span class="highlight-keyword">typeof</span>(ValidatorCommandHandlerDecorator&lt;&gt;), context =&gt;
        {
            <span class="highlight-keyword">var</span> commandType = context.ServiceType.GetGenericArguments()[<span class="highlight-number">0</span>];
            <span class="highlight-keyword">bool</span> mustDecorate = commandType.GetProperties().Any();
            <span class="highlight-keyword">return</span> mustDecorate;
        });

    <span class="highlight-comment">// Act</span>
    <span class="highlight-keyword">var</span> handler =
        container.GetInstance&lt;ICommandHandler&lt;CustomerMovedCommand&gt;&gt;();

    <span class="highlight-comment">// Assert</span>
    Assert.IsInstanceOfType(handler,
        <span class="highlight-keyword">typeof</span>(ValidatorCommandHandlerDecorator&lt;CustomerMovedCommand&gt;));
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAEBA");</script><div class="OH_CollapsibleAreaRegion" id="seeAlsoSection"><div class="OH_regiontitle">See Also</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"> </div><h4 class="subHeading">Reference</h4><div class="seeAlsoStyle"><a href="T_SimpleInjector_Container.htm">Container Class</a></div><div class="seeAlsoStyle"><a href="Overload_SimpleInjector_Container_RegisterDecorator.htm">RegisterDecorator Overload</a></div><div class="seeAlsoStyle"><a href="N_SimpleInjector.htm">SimpleInjector Namespace</a></div></div></div></div></div><div id="OH_footer" class="OH_footer"><p>Copyright (c) Simple Injector Contributors</p> </div></body></html>