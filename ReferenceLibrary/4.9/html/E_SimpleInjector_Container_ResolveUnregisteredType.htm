<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><style type="text/css">.OH_CodeSnippetContainerTabLeftActive, .OH_CodeSnippetContainerTabLeft,.OH_CodeSnippetContainerTabLeftDisabled { }.OH_CodeSnippetContainerTabRightActive, .OH_CodeSnippetContainerTabRight,.OH_CodeSnippetContainerTabRightDisabled { }.OH_footer { }</style><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>Container.ResolveUnregisteredType Event</title><meta name="Language" content="en-us" /><meta name="System.Keywords" content="ResolveUnregisteredType event" /><meta name="System.Keywords" content="Container.ResolveUnregisteredType event" /><meta name="Microsoft.Help.F1" content="SimpleInjector.Container.ResolveUnregisteredType" /><meta name="Microsoft.Help.Id" content="E:SimpleInjector.Container.ResolveUnregisteredType" /><meta name="Description" content="Occurs when an instance of a type is requested that has not been registered explicitly, allowing resolution of unregistered types before the container tries to create the type." /><meta name="Microsoft.Help.ContentType" content="Reference" /><meta name="BrandingAware" content="true" /><meta name="container" content="SimpleInjector" /><meta name="file" content="E_SimpleInjector_Container_ResolveUnregisteredType" /><meta name="guid" content="E_SimpleInjector_Container_ResolveUnregisteredType" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><script type="text/javascript" src="../scripts/clipboard.min.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="OH_outerDiv"><div class="OH_outerContent"><table class="TitleTable"><tr><td class="OH_tdTitleColumn"><h1>Container<span id="LST67973937_0"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST67973937_0?cpp=::|nu=.");</script>ResolveUnregisteredType Event</h1></td><td class="OH_tdRunningTitleColumn">Simple Injector</td></tr></table><div id="mainSection"><div id="mainBody"><span class="introStyle"></span> <div class="summary">
             Occurs when an instance of a type is requested that has not been registered explicitly, allowing
             resolution of unregistered types before the container tries to create the type.
             </div><p> </p>
    <strong>Namespace:</strong> 
   <a href="N_SimpleInjector.htm">SimpleInjector</a><br />
    <strong>Assembly:</strong>
   SimpleInjector (in SimpleInjector.dll) Version: 4.9.1<div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Syntax</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"> </div><div class="OH_CodeSnippetContainer"><div class="OH_CodeSnippetContainerTabs"><div class="OH_CodeSnippetContainerTabLeft" id="ID0ECCA_tabimgleft"> </div><div id="ID0ECCA_tab1" class="OH_CodeSnippetContainerTabFirst"><a href="#" onclick="javascript:ChangeTab('ID0ECCA','cs','1','3');return false;">C#</a></div><div id="ID0ECCA_tab2" class="OH_CodeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0ECCA','vb','2','3');return false;">VB</a></div><div id="ID0ECCA_tab3" class="OH_CodeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0ECCA','asp','3','3');return false;">ASP.NET</a></div><div class="OH_CodeSnippetContainerTabRight" id="ID0ECCA_tabimgright"> </div></div><div class="OH_CodeSnippetContainerCodeCollection"><div class="OH_CodeSnippetToolBar"><div class="OH_CodeSnippetToolBarText"><a id="ID0ECCA_copyCode" href="#" class="OH_copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0ECCA');return false;" title="Copy">Copy</a></div></div><div id="ID0ECCA_code_Div1" class="OH_CodeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="keyword">public</span> event <span class="identifier">EventHandler</span>&lt;<span class="identifier">UnregisteredTypeEventArgs</span>&gt; <span class="identifier">ResolveUnregisteredType</span></pre></div><div id="ID0ECCA_code_Div2" class="OH_CodeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">Public</span> Event <span class="identifier">ResolveUnregisteredType</span> <span class="keyword">As</span> <span class="identifier">EventHandler</span>(<span class="keyword">Of</span> <span class="identifier">UnregisteredTypeEventArgs</span>)</pre></div><div id="ID0ECCA_code_Div3" class="OH_CodeSnippetContainerCode" style="display: none"><pre xml:space="preserve" /></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0ECCA");</script><h4 class="subHeading">Value</h4>Type: <a href="https://docs.microsoft.com/dotnet/api/system.eventhandler-1" target="_blank">System<span id="LST67973937_1"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST67973937_1?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>EventHandler</a><span id="LST67973937_2"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST67973937_2?cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=(");</script><a href="T_SimpleInjector_UnregisteredTypeEventArgs.htm">UnregisteredTypeEventArgs</a><span id="LST67973937_3"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST67973937_3?cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)");</script><div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Remarks</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"> </div><p>
             The <span class="selflink">ResolveUnregisteredType</span> event is called by the container every time an
             unregistered type is requested for the first time, allowing a developer to do unregistered type
             resolution. By calling the
             <a href="M_SimpleInjector_UnregisteredTypeEventArgs_Register.htm">Register</a> method on the
             <a href="T_SimpleInjector_UnregisteredTypeEventArgs.htm">UnregisteredTypeEventArgs</a>, a <a href="T_SimpleInjector_Registration.htm">Registration</a>, <a href="https://docs.microsoft.com/dotnet/api/system.linq.expressions.expression" target="_blank">Expression</a> or
             <a href="https://docs.microsoft.com/dotnet/api/system.func-1" target="_blank">Func<span id="LST67973937_4"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST67973937_4?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>TResult<span id="LST67973937_5"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST67973937_5?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a> delegate can be registered allowing the container to retrieve
             instances of the requested type. This registration is cached and it prevents the
             <b>ResolveUnregisteredType</b> event from being called again for the same type.
             </p><p>
             When no registered event handled the registration of an unregistered type, the container will try
             to create the type when this type is either concrete or is the <a href="https://docs.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1" target="_blank">IEnumerable<span id="LST67973937_6"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST67973937_6?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>T<span id="LST67973937_7"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST67973937_7?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a>
             interface. Concrete types will be registered with the <a href="F_SimpleInjector_Lifestyle_Transient.htm">Transient</a>
             lifestyle and <a href="https://docs.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1" target="_blank">IEnumerable<span id="LST67973937_8"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST67973937_8?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>T<span id="LST67973937_9"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST67973937_9?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a> registrations will return an empty collection. When no
             even handled the registration and the container could not create it, an exception is thrown.
             </p><p><b>Thread-safety:</b> Please note that the container will not ensure that the hooked delegates
             are executed only once. While the calls to <span class="selflink">ResolveUnregisteredType</span> for a given type
             are finite (and will in most cases happen just once), a container can call the delegate multiple
             times and make parallel calls to the delegate. You must make sure that the code can be called
             multiple times and is thread-safe.
             </p><div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Examples</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"> </div>
             The following example shows the usage of the <span class="selflink">ResolveUnregisteredType</span> event:
             <div class="OH_CodeSnippetContainer"><div class="OH_CodeSnippetContainerTabs"><div class="OH_CodeSnippetContainerTabLeftActive" id="ID0EACABA_tabimgleft"> </div><div id="ID0EACABA_tab1" class="OH_CodeSnippetContainerTabSolo">C#</div><div class="OH_CodeSnippetContainerTabRightActive" id="ID0EACABA_tabimgright"> </div></div><div class="OH_CodeSnippetContainerCodeCollection"><div class="OH_CodeSnippetToolBar"><div class="OH_CodeSnippetToolBarText"><a id="ID0EACABA_copyCode" href="#" class="OH_copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EACABA');return false;" title="Copy">Copy</a></div></div><div id="ID0EACABA_code_Div1" class="OH_CodeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">public</span> <span class="highlight-keyword">interface</span> IValidator&lt;T&gt;
{
    <span class="highlight-keyword">void</span> Validate(T instance);
}

<span class="highlight-comment">// Implementation of the null object pattern.</span>
<span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> EmptyValidator&lt;T&gt; : IValidator&lt;T&gt;
{
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> Validate(T instance)
    {
        <span class="highlight-comment">// Does nothing.</span>
    }
}

[TestMethod]
<span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> TestResolveUnregisteredType()
{
    <span class="highlight-comment">// Arrange</span>
    <span class="highlight-keyword">var</span> container = <span class="highlight-keyword">new</span> Container();

    <span class="highlight-comment">// Register an EmptyValidator&lt;T&gt; to be returned when a IValidator&lt;T&gt; is requested:</span>
    container.ResolveUnregisteredType += (sender, e) =&gt;
    {
        <span class="highlight-keyword">if</span> (e.UnregisteredServiceType.IsGenericType &amp;&amp;
            e.UnregisteredServiceType.GetGenericTypeDefinition() == <span class="highlight-keyword">typeof</span>(IValidator&lt;&gt;))
        {
            <span class="highlight-keyword">var</span> validatorType = <span class="highlight-keyword">typeof</span>(EmptyValidator&lt;&gt;).MakeGenericType(
                e.UnregisteredServiceType.GetGenericArguments());

            <span class="highlight-comment">// Register the instance as singleton.</span>
            e.Register(Lifestyle.Singleton.CreateRegistration(validatorType, container));
        }
    };

    <span class="highlight-comment">// Act</span>
    <span class="highlight-keyword">var</span> orderValidator = container.GetInstance&lt;IValidator&lt;Order&gt;&gt;();
    <span class="highlight-keyword">var</span> customerValidator = container.GetInstance&lt;IValidator&lt;Customer&gt;&gt;();

    <span class="highlight-comment">// Assert</span>
    Assert.IsInstanceOfType(orderValidator, <span class="highlight-keyword">typeof</span>(EmptyValidator&lt;Order&gt;));
    Assert.IsInstanceOfType(customerValidator, <span class="highlight-keyword">typeof</span>(EmptyValidator&lt;Customer&gt;));
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EACABA");</script><p>
             The example above registers a delegate that is raised every time an unregistered type is requested
             from the container. The delegate checks whether the requested type is a closed generic
             implementation of the <b>IValidator&lt;T&gt;</b> interface (such as
             <b>IValidator&lt;Order&gt;</b> or <b>IValidator&lt;Customer&gt;</b>). In that case it
             will request the container for a concrete <b>EmptyValidator&lt;T&gt;</b> implementation that
             implements the given
             <a href="P_SimpleInjector_UnregisteredTypeEventArgs_UnregisteredServiceType.htm">UnregisteredServiceType</a>, and
             registers a delegate that will return this created instance. The <b>e.Register</b> call
             registers the method in the container, preventing the <span class="selflink">ResolveUnregisteredType</span> from
             being called again for the exact same service type, preventing any performance penalties.
             </p><p>
             Please note that given example is just an uhhmm... example. In the case of the example the
             <b>EmptyValidator&lt;T&gt;</b> can be better registered using of the built-in
             <a href="M_SimpleInjector_Container_Register_10.htm">Register</a> methods instead. These methods take
             care of any given generic type constraint and allow the implementation to be integrated into the
             container's pipeline, which allows it to be intercepted using the <a href="E_SimpleInjector_Container_ExpressionBuilding.htm">ExpressionBuilding</a>
             event and allow any registered <a href="M_SimpleInjector_Container_RegisterInitializer__1.htm">initializers</a> to be
             applied.
             </p><div class="OH_CollapsibleAreaRegion" id="seeAlsoSection"><div class="OH_regiontitle">See Also</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"> </div><h4 class="subHeading">Reference</h4><div class="seeAlsoStyle"><a href="T_SimpleInjector_Container.htm">Container Class</a></div><div class="seeAlsoStyle"><a href="N_SimpleInjector.htm">SimpleInjector Namespace</a></div></div></div></div></div><div id="OH_footer" class="OH_footer"><p>Copyright (c) Simple Injector Contributors</p> </div></body></html>