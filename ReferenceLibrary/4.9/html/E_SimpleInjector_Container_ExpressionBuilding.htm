<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><style type="text/css">.OH_CodeSnippetContainerTabLeftActive, .OH_CodeSnippetContainerTabLeft,.OH_CodeSnippetContainerTabLeftDisabled { }.OH_CodeSnippetContainerTabRightActive, .OH_CodeSnippetContainerTabRight,.OH_CodeSnippetContainerTabRightDisabled { }.OH_footer { }</style><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>Container.ExpressionBuilding Event</title><meta name="Language" content="en-us" /><meta name="System.Keywords" content="ExpressionBuilding event" /><meta name="System.Keywords" content="Container.ExpressionBuilding event" /><meta name="Microsoft.Help.F1" content="SimpleInjector.Container.ExpressionBuilding" /><meta name="Microsoft.Help.Id" content="E:SimpleInjector.Container.ExpressionBuilding" /><meta name="Description" content="Occurs directly after the creation of the of a registered type is made, but before any initializer and lifestyle specific caching has been applied, allowing the created to be altered. Multiple delegates may handle the same service type." /><meta name="Microsoft.Help.ContentType" content="Reference" /><meta name="BrandingAware" content="true" /><meta name="container" content="SimpleInjector" /><meta name="file" content="E_SimpleInjector_Container_ExpressionBuilding" /><meta name="guid" content="E_SimpleInjector_Container_ExpressionBuilding" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><script type="text/javascript" src="../scripts/clipboard.min.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="OH_outerDiv"><div class="OH_outerContent"><table class="TitleTable"><tr><td class="OH_tdTitleColumn"><h1>Container<span id="LST1526603E_0"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST1526603E_0?cpp=::|nu=.");</script>ExpressionBuilding Event</h1></td><td class="OH_tdRunningTitleColumn">Simple Injector</td></tr></table><div id="mainSection"><div id="mainBody"><span class="introStyle"></span> <div class="summary">
             Occurs directly after the creation of the <a href="https://docs.microsoft.com/dotnet/api/system.linq.expressions.expression" target="_blank">Expression</a> of a registered type is made,
             but before any <a href="M_SimpleInjector_Container_RegisterInitializer.htm">initializer</a> and lifestyle specific caching
             has been applied, allowing the created <a href="https://docs.microsoft.com/dotnet/api/system.linq.expressions.expression" target="_blank">Expression</a> to be altered. Multiple delegates
             may handle the same service type.
             </div><p> </p>
    <strong>Namespace:</strong> 
   <a href="N_SimpleInjector.htm">SimpleInjector</a><br />
    <strong>Assembly:</strong>
   SimpleInjector (in SimpleInjector.dll) Version: 4.9.0<div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Syntax</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"> </div><div class="OH_CodeSnippetContainer"><div class="OH_CodeSnippetContainerTabs"><div class="OH_CodeSnippetContainerTabLeft" id="ID0ECCA_tabimgleft"> </div><div id="ID0ECCA_tab1" class="OH_CodeSnippetContainerTabFirst"><a href="#" onclick="javascript:ChangeTab('ID0ECCA','cs','1','3');return false;">C#</a></div><div id="ID0ECCA_tab2" class="OH_CodeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0ECCA','vb','2','3');return false;">VB</a></div><div id="ID0ECCA_tab3" class="OH_CodeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0ECCA','asp','3','3');return false;">ASP.NET</a></div><div class="OH_CodeSnippetContainerTabRight" id="ID0ECCA_tabimgright"> </div></div><div class="OH_CodeSnippetContainerCodeCollection"><div class="OH_CodeSnippetToolBar"><div class="OH_CodeSnippetToolBarText"><a id="ID0ECCA_copyCode" href="#" class="OH_copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0ECCA');return false;" title="Copy">Copy</a></div></div><div id="ID0ECCA_code_Div1" class="OH_CodeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="keyword">public</span> event <span class="identifier">EventHandler</span>&lt;<span class="identifier">ExpressionBuildingEventArgs</span>&gt; <span class="identifier">ExpressionBuilding</span></pre></div><div id="ID0ECCA_code_Div2" class="OH_CodeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">Public</span> Event <span class="identifier">ExpressionBuilding</span> <span class="keyword">As</span> <span class="identifier">EventHandler</span>(<span class="keyword">Of</span> <span class="identifier">ExpressionBuildingEventArgs</span>)</pre></div><div id="ID0ECCA_code_Div3" class="OH_CodeSnippetContainerCode" style="display: none"><pre xml:space="preserve" /></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0ECCA");</script><h4 class="subHeading">Value</h4>Type: <a href="https://docs.microsoft.com/dotnet/api/system.eventhandler-1" target="_blank">System<span id="LST1526603E_1"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST1526603E_1?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>EventHandler</a><span id="LST1526603E_2"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST1526603E_2?cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=(");</script><a href="T_SimpleInjector_ExpressionBuildingEventArgs.htm">ExpressionBuildingEventArgs</a><span id="LST1526603E_3"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST1526603E_3?cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)");</script><div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Remarks</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"> </div><p>
             The <b>ExpressionBuilding</b> event is called by the container every time an registered type is
             getting compiled, allowing a developer to change the way the type is created. The delegate that
             hooks to the <b>ExpressionBuilding</b> event, can change the
             <a href="P_SimpleInjector_ExpressionBuildingEventArgs_Expression.htm">Expression</a> property on the
             <a href="T_SimpleInjector_ExpressionBuildingEventArgs.htm">ExpressionBuildingEventArgs</a>, which allows changing the way the type is constructed.
             </p><p>
             The exact <a href="https://docs.microsoft.com/dotnet/api/system.linq.expressions.expression" target="_blank">Expression</a> type supplied depends on the type of registration.
             Registrations that explicitly supply the implementation type (such as
             <a href="M_SimpleInjector_Container_Register__2.htm">Register&lt;TService, TImplementation&gt;()</a>)
             will result in an <a href="https://docs.microsoft.com/dotnet/api/system.linq.expressions.newexpression" target="_blank">NewExpression</a>, while registrations that take a delegate (such as
             <a href="M_SimpleInjector_Container_Register__1_2.htm">Register&lt;TService&gt;(Func&lt;TService&gt;)</a>)
             will result in an <a href="https://docs.microsoft.com/dotnet/api/system.linq.expressions.invocationexpression" target="_blank">InvocationExpression</a>. Singletons that are passed in using their
             value (<a href="M_SimpleInjector_Container_RegisterInstance__1.htm">RegisterInstance&lt;TService&gt;(TService)</a>)
             will result in an <a href="https://docs.microsoft.com/dotnet/api/system.linq.expressions.constantexpression" target="_blank">ConstantExpression</a>. Note that other <b>ExpressionBuilding</b>
             registrations might have changed the <a href="P_SimpleInjector_ExpressionBuildingEventArgs_Expression.htm">Expression</a>
             property and might have supplied an <a href="https://docs.microsoft.com/dotnet/api/system.linq.expressions.expression" target="_blank">Expression</a> of a different type. The order in
             which these events are registered might be of importance to you.
             </p><p><b>Thread-safety:</b> Please note that the container will not ensure that the hooked delegates
             are executed only once per service type. While the calls to registered <b>ExpressionBuilding</b>
             events for a  given type are finite (and will in most cases happen just once), a container can
             call the delegate multiple times and make parallel calls to the delegate. You must make sure that
             the code can be called multiple times and is thread-safe.
             </p><div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Examples</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"> </div>
             The following example shows the usage of the <b>ExpressionBuilding</b> event:
             <div class="OH_CodeSnippetContainer"><div class="OH_CodeSnippetContainerTabs"><div class="OH_CodeSnippetContainerTabLeftActive" id="ID0EABABA_tabimgleft"> </div><div id="ID0EABABA_tab1" class="OH_CodeSnippetContainerTabSolo">C#</div><div class="OH_CodeSnippetContainerTabRightActive" id="ID0EABABA_tabimgright"> </div></div><div class="OH_CodeSnippetContainerCodeCollection"><div class="OH_CodeSnippetToolBar"><div class="OH_CodeSnippetToolBarText"><a id="ID0EABABA_copyCode" href="#" class="OH_copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EABABA');return false;" title="Copy">Copy</a></div></div><div id="ID0EABABA_code_Div1" class="OH_CodeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> MyInjectPropertyAttribute : Attribute { }

<span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">void</span> Bootstrap()
{
    <span class="highlight-keyword">var</span> container = <span class="highlight-keyword">new</span> Container();

    container.ExpressionBuilding += (sender, e) =&gt;
    {
        <span class="highlight-keyword">var</span> expression = e.Expression <span class="highlight-keyword">as</span> NewExpression;

        <span class="highlight-keyword">if</span> (expression != <span class="highlight-keyword">null</span>)
        {
            <span class="highlight-keyword">var</span> propertiesToInject =
                <span class="highlight-keyword">from</span> property <span class="highlight-keyword">in</span> expression.Constructor.DeclaringType.GetProperties()
                <span class="highlight-keyword">where</span> property.GetCustomAttributes(<span class="highlight-keyword">typeof</span>(MyInjectPropertyAttribute), <span class="highlight-keyword">true</span>).Any()
                <span class="highlight-keyword">let</span> registration = container.GetRegistration(property.PropertyType, <span class="highlight-keyword">true</span>)
                <span class="highlight-keyword">select</span> Tuple.Create(property, registration);

            <span class="highlight-keyword">if</span> (propertiesToInject.Any())
            {
                Func&lt;<span class="highlight-keyword">object</span>, Tuple&lt;PropertyInfo, InstanceProducer&gt;[], <span class="highlight-keyword">object</span>&gt; injectorDelegate =
                    (instance, dependencies) =&gt;
                    {
                        <span class="highlight-keyword">foreach</span> (<span class="highlight-keyword">var</span> dependency <span class="highlight-keyword">in</span> dependencies)
                        {
                            dependency.Item1.SetValue(instance, dependency.Item2.GetInstance(), <span class="highlight-keyword">null</span>);
                        }

                        <span class="highlight-keyword">return</span> instance;
                    };

                e.Expression = Expression.Convert(
                    Expression.Invoke(
                        Expression.Constant(injectorDelegate),
                        e.Expression,
                        Expression.Constant(propertiesToInject.ToArray())),
                    expression.Constructor.DeclaringType);
            }
        }
    };
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EABABA");</script><p>
             The example above registers a delegate that is raised every time the container compiles the
             expression for an registered type. The delegate checks if the type contains properties that are
             decorated with the supplied <b>MyInjectPropertyAttribute</b>. If decorated properties are found,
             the given expression is replaced with an expression that injects decorated properties.
             </p><div class="OH_CollapsibleAreaRegion" id="seeAlsoSection"><div class="OH_regiontitle">See Also</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"> </div><h4 class="subHeading">Reference</h4><div class="seeAlsoStyle"><a href="T_SimpleInjector_Container.htm">Container Class</a></div><div class="seeAlsoStyle"><a href="N_SimpleInjector.htm">SimpleInjector Namespace</a></div></div></div></div></div><div id="OH_footer" class="OH_footer"><p>Copyright (c) Simple Injector Contributors</p> </div></body></html>